def writeln = \IO io [4 x char] s -> IO
  let io2 = IO call write io s end
  call write io2 "\n" end

decl read_from_buff = \IO [3 x [4 x char]] int -> IO
def read_from_buff = \IO io [3 x [4 x char]] buff int x -> IO
  if GE x 3
    io
  else
    let newio = IO call writeln io GET [4 x char] buff x end
    call read_from_buff newio buff ADD x 1 end

# SET returns a new composite type of the same type as its first argument, but
# with a transformation made to one of its elements.
def write_to_buff = \[3 x [4 x char]] buff int x [4 x char] s -> [3 x [4 x char]]
  SET buff x s

def main = \IO io -> IO
  let buff = [3 x [4 x char]] zero
  let buff2 = [3 x [4 x char]] call write_to_buff buff 0 "abc" end
  let buff3 = [3 x [4 x char]] call write_to_buff buff2 1 "xyz" end
  let buff4 = [3 x [4 x char]] call write_to_buff buff3 2 "123" end
  call read_from_buff io buff4 0 end
