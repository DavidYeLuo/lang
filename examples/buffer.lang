def writeln = \IO io [4 x char] s -> IO
  let io2 = write(io s)
  write(io2 "\n")

def read_from_buff = \IO io [3 x [4 x char]] buff int x -> IO
  if GE x 3
    io
  else
    let newio = writeln(io GET [4 x char] buff x)
    read_from_buff(newio buff ADD x 1)

# SET returns a new composite type of the same type as its first argument, but
# with a transformation made to one of its elements.
def write_to_buff = \mut GENERIC buff int x GENERIC s -> mut [3 x [4 x char]]
  SET buff x s

def main = \IO io -> IO
  let buff = zero as mut [3 x [4 x char]]
  let buff2 = write_to_buff(buff 0 "abc")
  let buff3 = write_to_buff(buff2 1 "xyz")
  let buff4 = write_to_buff(buff3 2 "123")
  read_from_buff(io buff4 0)
