def writeln_str = \IO io [128 x char] s -> IO
  let io2 = write(io s)
  write(io2 "\n")

def any_3 = \bool a bool b bool c -> bool
  OR a OR b c

def skip_ws = \IO io -> <IO int>
  let res = readc(io)
  let io2 = GET res 0
  let c = GET res 1
  if OR
      EQ c CAST int '\n'
      EQ c CAST int ' '
    skip_ws(io2)
  else
    <io2 c>

def any = \bool a -> bool
  a

def any = \bool a GENERIC_REMAINING remaining -> bool
  OR a any(remaining)

def __read_token_remaining = \IO io [128 x char] buff int idx -> <[128 x char] IO int>
  let res = readc(io)
  let io2 = GET res 0
  let c = GET res 1
  if any(LT c 0
         EQ CAST char c ' '
         EQ CAST char c '\n'
         GE idx 127)
    <buff io2 GET res 1>
  else
    let newbuff = SET buff idx CAST char c
    __read_token_remaining(io2 newbuff ADD idx 1)

def __read_string_token = \IO io [128 x char] buff int idx -> <[128 x char] IO int>
  let next = readc(io)
  let next_IO = GET next 0
  let next_c = GET next 1
  if OR
       LT next_c 0
       GE idx 127
    <buff next_IO next_c>
  else

  if EQ next_c CAST int '"'
    <SET buff idx '"' next_IO next_c>
  else

  __read_string_token(
    next_IO
    SET buff idx CAST char next_c
    ADD idx 1)

def __read_string_token = \IO io -> <[128 x char] IO int>
  let buff = zero as [128 x char]
  let buff2 = SET buff 0 '"'
  __read_string_token(io buff2 1)

# Returns
#   - buffer of the original chars
#   - IO
#   - The last char read
def read_token = \IO io int idx -> <[128 x char] IO int>
  let skipped = skip_ws(io)
  let skipped_IO = GET skipped 0
  let last_c = GET skipped 1
  let buff = zero as [128 x char]
  if LT last_c 0
    <buff skipped_IO last_c>
  else

  # Handle strings.
  if EQ last_c CAST int '"'
    __read_string_token(skipped_IO)
  else

  __read_token_remaining(
    skipped_IO
    SET buff 0 last_c
    1)

def read_all_tokens = \IO io -> IO
  let res = read_token(io 0)
  let c = GET res 2
  if LT c 0
    io
  else
    let io2 = writeln_str(
      GET res 1
      GET res 0)
    read_all_tokens(io2)

def main = \IO io -> IO
  read_all_tokens(io)
