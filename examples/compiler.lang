cdecl LLVMModuleCreateWithName = \cptr -> cptr
cdecl LLVMInt8Type  = \ -> cptr
cdecl LLVMInt32Type = \ -> cptr
cdecl LLVMFunctionType = \cptr cptr int int -> cptr
cdecl LLVMAddFunction = \cptr cptr cptr -> cptr
cdecl LLVMAppendBasicBlock = \cptr cptr -> cptr
cdecl LLVMCreateBuilder = \ -> cptr
cdecl LLVMPositionBuilderAtEnd = \cptr cptr -> none
cdecl LLVMBuildAdd = \cptr cptr cptr cptr -> cptr
cdecl LLVMGetParam = \cptr int -> cptr
cdecl LLVMBuildRet = \cptr cptr -> cptr
cdecl LLVMVerifyModule = \cptr int cptr -> int
cdecl LLVMBuildCall2 = \cptr cptr cptr cptr int cptr -> cptr
cdecl LLVMSetValueName = \cptr cptr -> none

cdecl LLVMInitializeX86TargetInfo = \ -> none
cdecl LLVMInitializeX86Target = \ -> none
cdecl LLVMInitializeX86TargetMC = \ -> none
cdecl LLVMInitializeX86AsmParser = \ -> none
cdecl LLVMInitializeX86AsmPrinter = \ -> none

cdecl LLVMDumpModule = \cptr -> none
cdecl LLVMGetNamedFunction = \cptr cptr -> cptr
cdecl LLVMPointerType = \cptr int -> cptr
cdecl LLVMBuildGlobalStringPtr = \cptr cptr cptr -> cptr

cdecl LLVMGetDefaultTargetTriple = \ -> cptr
cdecl LLVMGetTargetFromTriple = \cptr <cptr> cptr -> none
cdecl LLVMGetHostCPUName = \ -> cptr
cdecl LLVMGetHostCPUFeatures = \ -> cptr
cdecl LLVMCreateTargetMachine = \cptr cptr cptr cptr int int int -> cptr
cdecl LLVMTargetMachineEmitToFile = \cptr cptr cptr int cptr -> int

def writeln = \IO io GENERIC s -> IO
  write(write(io s) "\n")

def writeln = \IO io GENERIC arg GENERIC_REMAINING remaining -> IO
  let io2 = write(io arg)
  writeln(io2 remaining)

def any = \bool a -> bool
  a

def any = \bool a GENERIC_REMAINING remaining -> bool
  OR a any(remaining)

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - The read character
# - The row of the read character
# - The col of the read character
def readc_row_col = \IO io int old_row int old_col -> <IO int int int>
  let res = readc(io)
  let c = res[1]
  let io2 = res[0]
  if LT c 0
    <io2 c old_row ADD old_col 1>
  else

  if EQ c CAST int '\n'
    <io2 c ADD old_row 1 1>
  else
    <io2 c old_row ADD old_col 1>

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - The row of the last read character
# - The col of the last read character
def skip_ws = \IO io int old_row int old_col -> <IO int int int>
  let res = readc_row_col(io old_row old_col)
  let io2 = res[0]
  let c = res[1]
  let row = res[2]
  let col = res[3]
  if OR
      EQ c CAST int '\n'
      EQ c CAST int ' '
    skip_ws(io2 row col)
  else
    <io2 c row col>

# Arguments:
# - IO
# - Char buffer representing the token read.
# - Index to place a char into the buffer.
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - The token string buffer
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def __read_token_remaining = \IO io mut [128 x char] buff int idx int old_row int old_col ->
                              <mut [128 x char] IO int int int>
  let res = readc_row_col(io old_row old_col)
  let io2 = GET res 0
  let c = GET res 1
  let row = GET res 2
  let col = GET res 3
  if any(LT c 0
         EQ CAST char c ' '
         EQ CAST char c '\n'
         GE idx 127)
    <buff io2 c row col>
  else
    let newbuff = buff[idx] : CAST char c
    __read_token_remaining(io2 newbuff ADD idx 1 row col)

# Arguments:
# - IO
# - Char buffer representing the token read.
# - Index to place a char into the buffer.
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - The token string buffer
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def __read_string_token = \IO io mut [128 x char] buff int idx int old_row int old_col ->
                                <mut [128 x char] IO int int int>
  let next = readc_row_col(io old_row old_col)
  let next_IO = GET next 0
  let next_c = GET next 1
  let row = GET next 2
  let col = GET next 3
  if OR
       LT next_c 0
       GE idx 127
    <buff next_IO next_c row col>
  else

  if EQ next_c CAST int '"'
    <buff next_IO next_c row col>
  else

  # Handle character literals starting with `\`.
  if EQ next_c CAST int '\\'
    let next_next = readc_row_col(next_IO row col)
    let next_next_IO = GET next_next 0
    let next_next_c = GET next_next 1
    let next_next_row = GET next_next 2
    let next_next_col = GET next_next 3

    if LT next_next_c 0
      <buff next_next_IO next_next_c next_next_row next_next_col>
    else

    # Handle newline.
    if EQ CAST char next_next_c 'n'
      __read_string_token(
        next_next_IO
        buff[idx]: '\n'
        ADD idx 1
        next_next_row
        next_next_col)
    else

    # Handle any other literal.
    __read_string_token(
      next_next_IO
      buff[idx]: CAST char next_next_c
      ADD idx 1
      next_next_row
      next_next_col)
  else

  __read_string_token(
    next_IO
    buff[idx]: CAST char next_c
    ADD idx 1
    row
    col)

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - The token string buffer
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def __read_string_token = \IO io int old_row int old_col -> <mut [128 x char] IO int int int>
  let buff = zero as mut [128 x char]
  __read_string_token(io buff 0 old_row old_col)

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def skip_comment_line = \IO io int old_row int old_col -> <IO int int int>
  # Note the last read character was a '#'.
  let next = readc_row_col(io old_row old_col)
  let next_IO = GET next 0
  let next_c = GET next 1
  let row = GET next 2
  let col = GET next 3

  if LT next_c 0
    next
  else

  if EQ next_c CAST int '\n'
    next
  else
    skip_comment_line(next_IO row col)

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns
# - buffer of the original chars
# - IO
# - The last char read
# - The row of the last read character
# - The col of the last read character
def read_token = \IO io int old_row int old_col -> <[128 x char] IO int int int>
  let skipped = skip_ws(io old_row old_col)
  let skipped_IO = GET skipped 0
  let last_c = GET skipped 1
  let row = GET skipped 2
  let col = GET skipped 3

  # Skip comments.
  if EQ last_c CAST int '#'
    # Consume the whole line.
    let skip_comment_res = skip_comment_line(skipped_IO row col)
    read_token(
      GET skip_comment_res 0
      GET skip_comment_res 2
      GET skip_comment_res 3)
  else

  let buff = zero as mut [128 x char]

  let res =
    if LT last_c 0
      <buff skipped_IO last_c row col>
    else

    # Handle strings.
    if EQ last_c CAST int '"'
      __read_string_token(skipped_IO row col)
    else

    # Handle unique single-character tokens.
    if EQ last_c CAST int '\\'
      <buff[0]:last_c skipped_IO last_c row col>
    else

    __read_token_remaining(
      skipped_IO
      buff[0]: last_c
      1
      row col)

  keep _ = writeln(io "TOKEN: " GET res 0)
  keep _2 = writeln(io "row: " GET res 3)
  keep _3 = writeln(io "col: " GET res 4)

  <GET res 0
   GET res 1
   GET res 2
   GET res 3
   GET res 4>

cdecl strcmp = \cptr cptr -> int

# FIXME: We should have a way of reporting an error for this code:
# 
#   def streq = \GENERIC s1 GENERIC s2 -> bool
#     EQ strcmp(s1 s2) 0
#
# The potential error is when s1 and s2 don't match the actual arg types
# for strcmp. Right now, we crash in an assertion failure during lowering.

def streq = \GENERIC s1 GENERIC s2 -> bool
  EQ strcmp(CAST cptr s1 CAST cptr s2) 0

def not = \bool b -> bool
  if b false else true

def strne = \GENERIC s1 GENERIC s2 -> bool
  not(EQ strcmp(CAST cptr s1 CAST cptr s2) 0)

# Arguments:
# - IO
# - Expected string to consume
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - True if we consumed the correct tokens; false if failed.
# - The row of the last read character
# - The col of the last read character
def consume = \IO io GENERIC expected int old_row int old_col -> <IO bool int int>
  let res = read_token(io old_row old_col)
  let chars = GET res 0
  let c = GET res 2
  let row = GET res 3
  let col = GET res 4
  if OR LT c 0 strne(chars expected)
    <writeln(io old_row ":" old_col ": Error: expected to consume `" expected
             "` but instead found `" chars "`")
     false row col>
  else
    <io true row col>

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Result:
# - IO
# - [256 x char] representing the first named argument type
# - [256 x char] representing the first named argument name
# - [256 x char] representing the return type
# - The row of the last read character
# - The col of the last read character
def get_callable_type_named_arg_named_ret = \IO io int old_row int old_col -> <IO [256 x char] [256 x char] [256 x char] int int>
  # Consume `\`.
  let slash_res = consume(io "\\" old_row old_col)
  if not(GET slash_res 1)
    <writeln(io "EXPECTED `\\`")
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>  # We can just return zero here since this is the failing path anyway.
  else

  # First named argument type.
  let type_res = read_token(GET slash_res 0 GET slash_res 2
                            GET slash_res 3)
  if LT GET type_res 2 0
    <writeln(GET type_res 1 "Couldn't lex first argument type")
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else
  let type_chars = GET type_res 0

  # First argument name.
  let name_res = read_token(GET type_res 1 GET type_res 3 GET type_res 4)
  if LT GET name_res 2 0
    <writeln(GET name_res 1 "Couldn't les first argument name")
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else
  let name_chars = GET name_res 0

  # Consume `->`.
  let arrow_res = consume(io "->" GET name_res 3 GET name_res 4)
  if not(GET arrow_res 1)
    <writeln(GET arrow_res 0 "EXPECTED `->`")
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else

  # Named return type.
  let ret_res = read_token(GET arrow_res 0 GET arrow_res 2 GET arrow_res 3)
  if LT GET ret_res 2 0
    <writeln(GET type_res 1 "Couldn't lex return type")
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else
  let ret_chars = GET ret_res 0

  <GET ret_res 1
   CAST [256 x char] type_chars
   CAST [256 x char] name_chars
   CAST [256 x char] ret_chars
   GET ret_res 3
   GET ret_res 4>

def get_str_type = \ -> cptr
  let char_type = impurecall LLVMInt8Type end
  impurecall LLVMPointerType char_type 0 end

def get_printf_type = \ -> cptr
  let printf_param_types = <get_str_type()>
  impurecall LLVMFunctionType
    impurecall LLVMInt32Type end
    CAST cptr printf_param_types
    1  # Param count
    1  # isVarArg
    end

def get_printf_func = \cptr mod -> cptr
  let printf_func = LLVMGetNamedFunction(mod CAST cptr "printf")
  if CAST bool printf_func
    printf_func
  else

  impurecall LLVMAddFunction mod CAST cptr "printf" impurecall get_printf_type end end

def get_write_str_type = \ -> cptr
  let write_str_param_types = <impurecall LLVMInt32Type end impurecall get_str_type end>
  impurecall LLVMFunctionType
    impurecall LLVMInt32Type end  # Return type (IO)
    CAST cptr write_str_param_types
    2  # Param count
    0  # LLVMBool isVarArg
    end

def get_write_str_func = \cptr mod -> cptr
  let write_str_func = LLVMGetNamedFunction(mod CAST cptr "write_str")
  if CAST bool write_str_func
    write_str_func
  else

  let printf_func = get_printf_func(mod)

  # Create the write_str function which just dispatches to printf.
  let write_str_type = impurecall get_write_str_type end

  let write_str = impurecall LLVMAddFunction mod CAST cptr "write_str" write_str_type end
  let entry = impurecall LLVMAppendBasicBlock write_str CAST cptr "entry" end
  let builder = impurecall LLVMCreateBuilder end
  keep _ = impurecall LLVMPositionBuilderAtEnd builder entry end

  let func_args = <impurecall LLVMGetParam write_str 1 end>

  keep ir_call = impurecall LLVMBuildCall2
    builder
    impurecall get_printf_type end
    impurecall get_printf_func mod end
    CAST cptr func_args
    1  # Num args
    CAST cptr "printf_res"
    end
  keep ret = impurecall LLVMBuildRet builder impurecall LLVMGetParam write_str 0 end end

  write_str

# Arguments:
# - IO
# - llvm::Function pointer
# - llvm::IRBuilder pointer
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - Updated llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
def compile_write_call = \IO io cptr func cptr builder cptr mod int old_row int old_col -> <IO cptr int int>
  # NOTE: The `call` and `write` tokens have been popped at this point.
  # Parse the first argument.
  # For now let's assume it's just a variable.
  let io_res = read_token(io old_row old_col)
  let io_io = GET io_res 1
  if LT GET io_res 2 0
    <writeln(io_io "Unable to get token for IO type in first argument to write call")
     CAST cptr 0
     0
     0>
  else
  let io_chars = GET io_res 0

  # Now parse the second argument.
  # For now let's assume it's just a string literal.
  let str_res = read_token(io_io GET io_res 3 GET io_res 4)
  let str_io = GET str_res 1
  if LT GET str_res 2 0
    <writeln(
       str_io
       "Unable to get token for [256 x char] type in second argument to write call")
     CAST cptr 0
     0
     0>
  else
  let str_chars = GET str_res 0

  # Now consume the `end`.
  let end_res = consume(io "end" GET str_res 3 GET str_res 4)
  if not(GET end_res 1)
    <writeln(io "EXPECTED `end` at end of write call")
     CAST cptr 0
     0
     0>
  else

  keep write_str = impurecall get_write_str_func mod end

  let str = LLVMBuildGlobalStringPtr(builder CAST cptr str_chars CAST cptr "str_literal")

  # FIXME: We should make a mapping from the names to the arguments.
  let func_args =
     <impurecall LLVMGetParam func 0 end
      str>

  keep write_str_type = impurecall get_write_str_type end
  keep write_str_func = impurecall get_write_str_func mod end

  keep ir_call = impurecall LLVMBuildCall2
    builder
    write_str_type
    write_str_func
    CAST cptr func_args
    2  # Num args
    CAST cptr "write_str_res"
    end

  <GET end_res 0 ir_call GET end_res 2 GET end_res 3>

# Arguments:
# - IO
# - llvm::Function pointer
# - llvm::IRBuilder pointer
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - Updated llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
def compile_call = \IO io cptr func cptr builder cptr mod int old_row int old_col -> <IO cptr int int>
  # NOTE: The `call` token has been popped at this point.
  # Get the next token denoting the callable.
  let callable_res = read_token(io old_row old_col)
  if LT GET callable_res 2 0
    <writeln(GET callable_res 1 "Unable to get token for callable for call")
     CAST cptr 0
     0
     0>
  else
  let callable_chars = GET callable_res 0

  if streq(callable_chars "write")
    compile_write_call(GET callable_res 1 func builder mod
                       GET callable_res 3
                       GET callable_res 4)
  else
    <writeln(
       GET callable_res 1
       "Unable to handle token for callable in call: "
       callable_chars)
     CAST cptr 0
     0
     0>

# Arguments:
# - IO
# - llvm::Function pointer
# - llvm::IRBuilder pointer
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - The LLVM expression value
# - The row of the last read char
# - The col of the last read char
def compile_expr = \IO io cptr func cptr builder cptr mod int old_row int old_col -> <IO cptr int int>
  # Get the next token denoting the expression.
  let expr_res = read_token(io old_row old_col)
  if LT GET expr_res 2 0
    <writeln(io "Couldn't get next token for compiling an expression")
     CAST cptr 0
     0
     0>
  else
  let expr_chars = GET expr_res 0

  if streq(expr_chars "call")
    compile_call(GET expr_res 1 func builder mod GET expr_res 3 GET expr_res 4)
  else
    <writeln(
       GET expr_res 1
       GET expr_res 3
       ":"
       GET expr_res 4
       ": Error: Unable to parse expression: "
       expr_chars)
     CAST cptr 0
     0
     0>

# Arguments:
# - IO
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - cptr representing the module (0 indicates an error).
# - The row of the last read char
# - The col of the last read char
def compile_def = \IO io cptr mod int old_row int old_col -> <IO cptr int int>
  # Consume `def`.
  let def_res = consume(io "def" old_row old_col)
  if not(GET def_res 1)
    <GET def_res 0 CAST cptr 0 0 0>
  else

  # Get the name.
  let name_res = read_token(GET def_res 0 GET def_res 2 GET def_res 3)
  if LT GET name_res 2 0
    <writeln(io "MISSING NAME") CAST cptr 0 0 0>
  else
  let name_chars = GET name_res 0

  # Consume `=`.
  let eq_res = consume(io "=" GET name_res 3 GET name_res 4)
  if not(GET eq_res 1)
    <writeln(io "EXPECTED `=`") CAST cptr 0 0 0>
  else

  # Get the type, which is just a callable with a single named type argument
  # and named return type.
  let type_res =
    get_callable_type_named_arg_named_ret(
      GET eq_res 0
      GET eq_res 2
      GET eq_res 3)
  if streq(GET type_res 1 "")
    <writeln(io "Couldn't parse callable type") CAST cptr 0 0 0>
  else

  # Lower IO types to i32.
  let first_param_type = GET type_res 1
  if strne("IO" first_param_type)
    <writeln(io "Unknown type " first_param_type) CAST cptr 0 0 0>
  else

  let return_type = GET type_res 3
  if strne("IO" return_type)
    <writeln(io "Unknown type " return_type) CAST cptr 0 0 0>
  else

  # Create the function.
  keep param_types = <impurecall LLVMInt32Type end>
  keep func_type = impurecall LLVMFunctionType
    impurecall LLVMInt32Type end  # Return type
    CAST cptr param_types
    1  # Param count
    0  # LLVMBool isVarArg
    end
  keep func = impurecall LLVMAddFunction mod CAST cptr name_chars func_type end
  keep entry = impurecall LLVMAppendBasicBlock func CAST cptr "entry" end
  keep builder = impurecall LLVMCreateBuilder end
  keep positioned_builder_at_end = impurecall LLVMPositionBuilderAtEnd builder entry end

  # Set argument names.
  keep set_arg_name = impurecall LLVMSetValueName
    impurecall LLVMGetParam func 0 end
    CAST cptr GET type_res 2
    end

  # Get the next token denoting the expression.
  let res = compile_expr(io func builder mod GET type_res 4 GET type_res 5)
  if not(CAST bool GET res 1)
    <GET res 0 CAST cptr 0 0 0>
  else

  keep ret = impurecall LLVMBuildRet builder GET res 1 end

  <GET res 0 mod GET res 2 GET res 3>

cdecl printf = \cptr cptr -> int

def main = \IO io -> IO
  let mod = impurecall LLVMModuleCreateWithName CAST cptr "my_module" end

  let compile_def_res = compile_def(io mod 1 1)
  let compile_def_IO = GET compile_def_res 0
  let compile_def_mod = GET compile_def_res 1
  if not(CAST bool GET compile_def_res 1)
    compile_def_IO
  else

  let verify_failed = impurecall LLVMVerifyModule compile_def_mod 0 CAST cptr 0 end
  let verify_failed_io = writeln(
    compile_def_IO
    "verify module failed: "
    verify_failed)

  keep mod_dump = impurecall LLVMDumpModule compile_def_mod end

  keep _2 = impurecall LLVMInitializeX86TargetInfo end
  keep _4 = impurecall LLVMInitializeX86Target end
  keep _5 = impurecall LLVMInitializeX86TargetMC end
  keep _6 = impurecall LLVMInitializeX86AsmParser end
  keep _7 = impurecall LLVMInitializeX86AsmPrinter end

  keep triple = LLVMGetDefaultTargetTriple()
  keep target = <CAST cptr 0>
  keep _3 = impurecall LLVMGetTargetFromTriple triple target CAST cptr 0 end
  keep cpu = LLVMGetHostCPUName()
  keep features = LLVMGetHostCPUFeatures()

  keep triple_printf_res = impurecall printf CAST cptr "triple: %s\n" triple end

  keep io__4 = write(verify_failed_io "target: ")
  keep io__5 = writeln(io__4 GET target 0)
  keep io__8 = printf(CAST cptr "cpu: %s\n" cpu)
  keep printf_num_chars = printf(CAST cptr "features: %s\n" features)

  keep target_machine = impurecall LLVMCreateTargetMachine
    GET target 0
    triple
    cpu
    features
    0
    2
    0
    end

  let io___13 = writeln(io__5 "target_machine: " target_machine)

  keep failed_to_write =
    LLVMTargetMachineEmitToFile(target_machine mod CAST cptr "add.obj" 1 CAST cptr 0)
  keep failed_to_write_io =
    writeln(io___13 "failed to write add.obj: " failed_to_write)

  let err_buff = zero as mut [1024 x char]
  let err_buff_ptr = <CAST cptr err_buff>

  keep failed_to_write_obj = impurecall LLVMTargetMachineEmitToFile
    target_machine
    compile_def_mod
    CAST cptr "obj.obj"
    1
    CAST cptr err_buff_ptr
    end
  writeln(failed_to_write_io "failed to write obj.obj: " failed_to_write_obj)
