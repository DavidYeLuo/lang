decl LLVMModuleCreateWithName = \cptr -> cptr
decl LLVMInt8Type  = \ -> cptr
decl LLVMInt32Type = \ -> cptr
decl LLVMFunctionType = \cptr cptr int int -> cptr
decl LLVMAddFunction = \cptr cptr cptr -> cptr
decl LLVMAppendBasicBlock = \cptr cptr -> cptr
decl LLVMCreateBuilder = \ -> cptr
decl LLVMPositionBuilderAtEnd = \cptr cptr -> none
decl LLVMBuildAdd = \cptr cptr cptr cptr -> cptr
decl LLVMGetParam = \cptr int -> cptr
decl LLVMBuildRet = \cptr cptr -> cptr
decl LLVMVerifyModule = \cptr int cptr -> int
decl LLVMBuildCall2 = \cptr cptr cptr cptr int cptr -> cptr
decl LLVMSetValueName = \cptr cptr -> none

decl LLVMInitializeX86TargetInfo = \ -> none
decl LLVMInitializeX86Target = \ -> none
decl LLVMInitializeX86TargetMC = \ -> none
decl LLVMInitializeX86AsmParser = \ -> none
decl LLVMInitializeX86AsmPrinter = \ -> none

decl LLVMDumpModule = \cptr -> none
decl LLVMGetNamedFunction = \cptr cptr -> cptr
decl LLVMPointerType = \cptr int -> cptr
decl LLVMBuildGlobalStringPtr = \cptr cptr cptr -> cptr

decl LLVMGetDefaultTargetTriple = \ -> cptr
decl LLVMGetTargetFromTriple = \cptr <cptr> cptr -> none
decl LLVMGetHostCPUName = \ -> cptr
decl LLVMGetHostCPUFeatures = \ -> cptr
decl LLVMCreateTargetMachine = \cptr cptr cptr cptr int int int -> cptr
decl LLVMTargetMachineEmitToFile = \cptr cptr cptr int cptr -> int

def writeln_str = \IO io [256 x char] s -> IO
  let io2 = IO call write io s end
  call write io2 "\n" end

def writeln_2str = \IO io [256 x char] s [256 x char] s2 -> IO
  let io2 = IO call write io s end
  call writeln_str io2 s2 end

def writeln_3str = \IO io [256 x char] s [256 x char] s2 [256 x char] s3 -> IO
  let io2 = IO call write io s end
  call writeln_2str io2 s2 s3 end

def writeln_4str = \IO io [256 x char] s [256 x char] s2 [256 x char] s3 [256 x char] s4 -> IO
  let io2 = IO call write io s end
  call writeln_3str io2 s2 s3 s4 end

def writeln_5str = \IO io [256 x char] s [256 x char] s2 [256 x char] s3 [256 x char] s4
                    [256 x char] s5 -> IO
  let io2 = IO call write io s end
  call writeln_4str io2 s2 s3 s4 s5 end

def writeln_cptr = \IO io cptr ptr -> IO
  let io2 = IO call write io ptr end
  call write io2 "\n" end

def writeln_int = \IO io int i -> IO
  let io2 = IO call write io i end
  call write io2 "\n" end

def writeln_str_int = \IO io [256 x char] s int i -> IO
  let io2 = IO call write io s end
  call writeln_int io2 i end

def writeln_int_5str = \IO io int i2 [256 x char] s2 [256 x char] s3 [256 x char] s4 [256 x char] s5 [256 x char] s6 -> IO
  call writeln_5str
    call write io i2 end
    s2
    s3
    s4
    s5
    s6
    end

def writeln_str_int_5str = \IO io [256 x char] s1 int i2 [256 x char] s2 [256 x char] s3 [256 x char] s4 [256 x char] s5 [256 x char] s6 -> IO
  call writeln_int_5str
    call write io s1 end
    i2
    s2
    s3
    s4
    s5
    s6
    end

def writeln_int_str_int_2str = \IO io int i1 [256 x char] s1 int i2 [256 x char] s2 [256 x char] s3 -> IO
  let io2 = IO call write io i1 end
  let io3 = IO call write io2 s1 end
  let io4 = IO call write io3 i2 end
  call writeln_2str io4 s2 s3 end

def writeln_int_str_int_5str = \IO io int i1 [256 x char] s1 int i2 [256 x char] s2 [256 x char] s3 [256 x char] s4 [256 x char] s5 [256 x char] s6 -> IO
  call writeln_str_int_5str
    call write io i1 end
    s1
    i2
    s2
    s3
    s4
    s5
    s6
    end

def any_3 = \bool a bool b bool c -> bool
  OR a OR b c

def any_4 = \bool a bool b bool c bool d -> bool
  OR d OR a OR b c

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - The read character
# - The row of the read character
# - The col of the read character
def readc_row_col = \IO io int old_row int old_col -> <IO int int int>
  let res = <IO int> call readc io end
  let c = int GET int res 1
  let io2 = IO GET IO res 0
  if LT c 0
    <io2 c old_row ADD old_col 1>
  else

  if EQ c CAST int '\n'
    <io2 c ADD old_row 1 1>
  else
    <io2 c old_row ADD old_col 1>

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - The row of the last read character
# - The col of the last read character
def skip_ws = \IO io int old_row int old_col -> <IO int int int>
  let res = <IO int int int> call readc_row_col io old_row old_col end
  let io2 = IO GET IO res 0
  let c = int GET int res 1
  let row = int GET int res 2
  let col = int GET int res 3
  if OR
      EQ c CAST int '\n'
      EQ c CAST int ' '
    call skip_ws io2 row col end
  else
    <io2 c row col>

# Arguments:
# - IO
# - Char buffer representing the token read.
# - Index to place a char into the buffer.
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - The token string buffer
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def __read_token_remaining = \IO io [128 x char] buff int idx int old_row int old_col ->
                              <[128 x char] IO int int int>
  let res = <IO int int int> call readc_row_col io old_row old_col end
  let io2 = IO GET IO res 0
  let c = int GET int res 1
  let row = int GET int res 2
  let col = int GET int res 3
  if call any_4
       LT c 0
       EQ CAST char c ' '
       EQ CAST char c '\n'
       GE idx 127
       end
    <buff io2 c row col>
  else
    let newbuff = [128 x char] SET buff idx CAST char c
    call __read_token_remaining io2 newbuff ADD idx 1 row col end

# Arguments:
# - IO
# - Char buffer representing the token read.
# - Index to place a char into the buffer.
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - The token string buffer
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def __read_string_token_impl = \IO io [128 x char] buff int idx int old_row int old_col ->
                                <[128 x char] IO int int int>
  let next = <IO int int int> call readc_row_col io old_row old_col end
  let next_IO = IO GET IO next 0
  let next_c = int GET int next 1
  let row = int GET int next 2
  let col = int GET int next 3
  if OR
       LT next_c 0
       GE idx 127
    <buff next_IO next_c row col>
  else

  if EQ next_c CAST int '"'
    <buff next_IO next_c row col>
  else

  # Handle character literals starting with `\`.
  if EQ next_c CAST int '\\'
    let next_next = <IO int int int> call readc_row_col next_IO row col end
    let next_next_IO = IO GET IO next_next 0
    let next_next_c = int GET int next_next 1
    let next_next_row = int GET int next_next 2
    let next_next_col = int GET int next_next 3

    if LT next_next_c 0
      <buff next_next_IO next_next_c next_next_row next_next_col>
    else

    # Handle newline.
    if EQ CAST char next_next_c 'n'
      call __read_string_token_impl
        next_next_IO
        SET buff idx '\n'
        ADD idx 1
        next_next_row
        next_next_col
        end
    else

    # Handle any other literal.
    call __read_string_token_impl
      next_next_IO
      SET buff idx CAST char next_next_c
      ADD idx 1
      next_next_row
      next_next_col
      end
  else

  call __read_string_token_impl
    next_IO
    SET buff idx CAST char next_c
    ADD idx 1
    row
    col
    end

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - The token string buffer
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def __read_string_token = \IO io int old_row int old_col -> <[128 x char] IO int int int>
  let buff = [128 x char] zero
  call __read_string_token_impl io buff 0 old_row old_col end

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - The last read character
# - The row of the last read character
# - The col of the last read character
def skip_comment_line = \IO io int old_row int old_col -> <IO int int int>
  # Note the last read character was a '#'.
  let next = <IO int int int> call readc_row_col io old_row old_col end
  let next_IO = IO GET IO next 0
  let next_c = int GET int next 1
  let row = int GET int next 2
  let col = int GET int next 3

  if LT next_c 0
    next
  else

  if EQ next_c CAST int '\n'
    next
  else
    call skip_comment_line next_IO row col end

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Returns
# - buffer of the original chars
# - IO
# - The last char read
# - The row of the last read character
# - The col of the last read character
def read_token = \IO io int old_row int old_col -> <[128 x char] IO int int int>
  let skipped = <IO int int int> call skip_ws io old_row old_col end
  let skipped_IO = IO GET IO skipped 0
  let last_c = int GET int skipped 1
  let row = int GET int skipped 2
  let col = int GET int skipped 3

  # Skip comments.
  if EQ last_c CAST int '#'
    # Consume the whole line.
    let skip_comment_res = <IO int int int> call skip_comment_line skipped_IO row col end
    call read_token
      GET IO skip_comment_res 0
      GET int skip_comment_res 2
      GET int skip_comment_res 3
      end
  else

  let buff = [128 x char] zero

  let res = <[128 x char] IO int int int>
    if LT last_c 0
      <buff skipped_IO last_c row col>
    else

    # Handle strings.
    if EQ last_c CAST int '"'
      call __read_string_token skipped_IO row col end
    else

    # Handle unique single-character tokens.
    if EQ last_c CAST int '\\'
      <SET buff 0 last_c skipped_IO last_c row col>
    else

    call __read_token_remaining
      skipped_IO
      SET buff 0 last_c
      1
      row col
      end

  keep _ = IO call writeln_2str io CAST [256 x char] "TOKEN: " CAST [256 x char] GET [128 x char] res 0 end
  keep _2 = IO call writeln_str_int io CAST [256 x char] "row: " GET int res 3 end
  keep _3 = IO call writeln_str_int io CAST [256 x char] "col: " GET int res 4 end

  <GET [128 x char] res 0
   GET IO res 1
   GET int res 2
   GET int res 3
   GET int res 4>

decl strcmp = \[256 x char] [256 x char] -> int

def streq = \[256 x char] s1 [256 x char] s2 -> bool
  let res = int call strcmp s1 s2 end
  EQ res 0

def not = \bool b -> bool
  if b false else true

def strne = \[256 x char] s1 [256 x char] s2 -> bool
  let res = int call strcmp s1 s2 end
  call not EQ res 0 end

# Arguments:
# - IO
# - Expected string to consume
# - The row of the last read character
# - The col of the last read character
#
# Returns:
# - IO
# - True if we consumed the correct tokens; false if failed.
# - The row of the last read character
# - The col of the last read character
def consume = \IO io [256 x char] expected int old_row int old_col -> <IO bool int int>
  let res = <[128 x char] IO int int int> call read_token io old_row old_col end
  let chars = [128 x char] GET [128 x char] res 0
  let c = int GET int res 2
  let row = int GET int res 3
  let col = int GET int res 4
  if OR LT c 0 call strne CAST [256 x char] chars expected end
    <call writeln_int_str_int_5str io
      old_row
      CAST [256 x char] ":"
      old_col
      CAST [256 x char] ": Error: expected to consume `"
      expected
      CAST [256 x char] "` but instead found `"
      CAST [256 x char] chars
      CAST [256 x char] "`"
      end
     false row col>
  else
    <io true row col>

# Arguments:
# - IO
# - The row of the last read character
# - The col of the last read character
#
# Result:
# - IO
# - [256 x char] representing the first named argument type
# - [256 x char] representing the first named argument name
# - [256 x char] representing the return type
# - The row of the last read character
# - The col of the last read character
def get_callable_type_named_arg_named_ret = \IO io int old_row int old_col -> <IO [256 x char] [256 x char] [256 x char] int int>
  # Consume `\`.
  let slash_res = <IO bool int int> call consume io CAST [256 x char] "\\" old_row old_col end
  if call not GET bool slash_res 1 end
    <call writeln_str io CAST [256 x char] "EXPECTED `\\`" end
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>  # We can just return zero here since this is the failing path anyway.
  else

  # First named argument type.
  let type_res = <[128 x char] IO int int int> call read_token GET IO slash_res 0 GET int slash_res 2 GET int slash_res 3 end
  if LT GET int type_res 2 0
    <call writeln_str GET IO type_res 1 CAST [256 x char] "Couldn't lex first argument type" end
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else
  let type_chars = [128 x char] GET [128 x char] type_res 0

  # First argument name.
  let name_res = <[128 x char] IO int int int> call read_token GET IO type_res 1 GET int type_res 3 GET int type_res 4 end
  if LT GET int name_res 2 0
    <call writeln_str GET IO name_res 1 CAST [256 x char] "Couldn't les first argument name" end
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else
  let name_chars = [128 x char] GET [128 x char] name_res 0

  # Consume `->`.
  let arrow_res = <IO bool int int> call consume io CAST [256 x char] "->" GET int name_res 3 GET int name_res 4 end
  if call not GET bool arrow_res 1 end
    <call writeln_str GET IO arrow_res 0 CAST [256 x char] "EXPECTED `->`" end
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else

  # Named return type.
  let ret_res = <[128 x char] IO int int int> call read_token GET IO arrow_res 0 GET int arrow_res 2 GET int arrow_res 3 end
  if LT GET int ret_res 2 0
    <call writeln_str GET IO type_res 1 CAST [256 x char] "Couldn't lex return type" end
     CAST [256 x char] ""
     CAST [256 x char] ""
     CAST [256 x char] ""
     0 0>
  else
  let ret_chars = [128 x char] GET [128 x char] ret_res 0

  <GET IO ret_res 1
   CAST [256 x char] type_chars
   CAST [256 x char] name_chars
   CAST [256 x char] ret_chars
   GET int ret_res 3
   GET int ret_res 4>

def get_str_type = \ -> cptr
  let char_type = cptr impurecall LLVMInt8Type end
  impurecall LLVMPointerType char_type 0 end

def get_printf_type = \ -> cptr
  let printf_param_types = <cptr> <call get_str_type end>
  impurecall LLVMFunctionType
    impurecall LLVMInt32Type end
    CAST cptr printf_param_types
    1  # Param count
    1  # isVarArg
    end

def get_printf_func = \cptr mod -> cptr
  let printf_func = cptr call LLVMGetNamedFunction mod CAST cptr "printf" end
  if CAST bool printf_func
    printf_func
  else

  impurecall LLVMAddFunction mod CAST cptr "printf" impurecall get_printf_type end end

def get_write_str_type = \ -> cptr
  let write_str_param_types = <cptr cptr> <impurecall LLVMInt32Type end impurecall get_str_type end>
  impurecall LLVMFunctionType
    impurecall LLVMInt32Type end  # Return type (IO)
    CAST cptr write_str_param_types
    2  # Param count
    0  # LLVMBool isVarArg
    end

def get_write_str_func = \cptr mod -> cptr
  let write_str_func = cptr call LLVMGetNamedFunction mod CAST cptr "write_str" end
  if CAST bool write_str_func
    write_str_func
  else

  let printf_func = cptr call get_printf_func mod end

  # Create the write_str function which just dispatches to printf.
  let write_str_type = cptr impurecall get_write_str_type end

  let write_str = cptr impurecall LLVMAddFunction mod CAST cptr "write_str" write_str_type end
  let entry = cptr impurecall LLVMAppendBasicBlock write_str CAST cptr "entry" end
  let builder = cptr impurecall LLVMCreateBuilder end
  keep _ = none impurecall LLVMPositionBuilderAtEnd builder entry end

  let func_args = <cptr> <impurecall LLVMGetParam write_str 1 end>

  keep ir_call = cptr impurecall LLVMBuildCall2
    builder
    impurecall get_printf_type end
    impurecall get_printf_func mod end
    CAST cptr func_args
    1  # Num args
    CAST cptr "printf_res"
    end
  keep ret = cptr impurecall LLVMBuildRet builder impurecall LLVMGetParam write_str 0 end end

  write_str

# Arguments:
# - IO
# - llvm::Function pointer
# - llvm::IRBuilder pointer
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - Updated llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
def compile_write_call = \IO io cptr func cptr builder cptr mod int old_row int old_col -> <IO cptr int int>
  # NOTE: The `call` and `write` tokens have been popped at this point.
  # Parse the first argument.
  # For now let's assume it's just a variable.
  let io_res = <[128 x char] IO int int int> call read_token io old_row old_col end
  let io_io = IO GET IO io_res 1
  if LT GET int io_res 2 0
    <call writeln_str io_io CAST [256 x char] "Unable to get token for IO type in first argument to write call" end
     CAST cptr 0
     0
     0>
  else
  let io_chars = [128 x char] GET [128 x char] io_res 0

  # Now parse the second argument.
  # For now let's assume it's just a string literal.
  let str_res = <[128 x char] IO int int int> call read_token io_io GET int io_res 3 GET int io_res 4 end
  let str_io = IO GET IO str_res 1
  if LT GET int str_res 2 0
    <call writeln_str
       str_io
       CAST [256 x char] "Unable to get token for [256 x char] type in second argument to write call"
       end
     CAST cptr 0
     0
     0>
  else
  let str_chars = [128 x char] GET [128 x char] str_res 0

  # Now consume the `end`.
  let end_res = <IO bool int int> call consume io CAST [256 x char] "end" GET int str_res 3 GET int str_res 4 end
  if call not GET bool end_res 1 end
    <call writeln_str io CAST [256 x char] "EXPECTED `end` at end of write call" end
     CAST cptr 0
     0
     0>
  else

  keep write_str = cptr impurecall get_write_str_func mod end

  let str = cptr call LLVMBuildGlobalStringPtr builder CAST cptr str_chars CAST cptr "str_literal" end

  # FIXME: We should make a mapping from the names to the arguments.
  let func_args = <cptr cptr>
     <impurecall LLVMGetParam func 0 end
      str>

  keep write_str_type = cptr impurecall get_write_str_type end
  keep write_str_func = cptr impurecall get_write_str_func mod end

  keep ir_call = cptr impurecall LLVMBuildCall2
    builder
    write_str_type
    write_str_func
    CAST cptr func_args
    2  # Num args
    CAST cptr "write_str_res"
    end

  <GET IO end_res 0 ir_call GET int end_res 2 GET int end_res 3>

# Arguments:
# - IO
# - llvm::Function pointer
# - llvm::IRBuilder pointer
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - Updated llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
def compile_call = \IO io cptr func cptr builder cptr mod int old_row int old_col -> <IO cptr int int>
  # NOTE: The `call` token has been popped at this point.
  # Get the next token denoting the callable.
  let callable_res = <[128 x char] IO int int int> call read_token io old_row old_col end
  if LT GET int callable_res 2 0
    <call writeln_str GET IO callable_res 1 CAST [256 x char] "Unable to get token for callable for call" end
     CAST cptr 0
     0
     0>
  else
  let callable_chars = [128 x char] GET [128 x char] callable_res 0

  if call streq CAST [256 x char] callable_chars CAST [256 x char] "write" end
    call compile_write_call GET IO callable_res 1 func builder mod GET int callable_res 3 GET int callable_res 4 end
  else
    <call writeln_2str
       GET IO callable_res 1
       CAST [256 x char] "Unable to handle token for callable in call: "
       CAST [256 x char] callable_chars
       end
     CAST cptr 0
     0
     0>

# Arguments:
# - IO
# - llvm::Function pointer
# - llvm::IRBuilder pointer
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - The LLVM expression value
# - The row of the last read char
# - The col of the last read char
def compile_expr = \IO io cptr func cptr builder cptr mod int old_row int old_col -> <IO cptr int int>
  # Get the next token denoting the expression.
  let expr_res = <[128 x char] IO int int int> call read_token io old_row old_col end
  if LT GET int expr_res 2 0
    <call writeln_str io CAST [256 x char] "Couldn't get next token for compiling an expression" end
     CAST cptr 0
     0
     0>
  else
  let expr_chars = [128 x char] GET [128 x char] expr_res 0

  if call streq CAST [256 x char] expr_chars CAST [256 x char] "call" end
    call compile_call GET IO expr_res 1 func builder mod GET int expr_res 3 GET int expr_res 4 end
  else
    <call writeln_int_str_int_2str
       GET IO expr_res 1
       GET int expr_res 3
       CAST [256 x char] ":"
       GET int expr_res 4
       CAST [256 x char] ": Error: Unable to parse expression: "
       CAST [256 x char] expr_chars
       end
     CAST cptr 0
     0
     0>

# Arguments:
# - IO
# - llvm::Module pointer
# - The row of the last read char
# - The col of the last read char
#
# Returns:
# - IO
# - cptr representing the module (0 indicates an error).
# - The row of the last read char
# - The col of the last read char
def compile_def = \IO io cptr mod int old_row int old_col -> <IO cptr int int>
  # Consume `def`.
  let def_res = <IO bool int int> call consume io CAST [256 x char] "def" old_row old_col end
  if call not GET bool def_res 1 end
    <GET IO def_res 0 CAST cptr 0 0 0>
  else

  # Get the name.
  let name_res = <[128 x char] IO int int int> call read_token GET IO def_res 0 GET int def_res 2 GET int def_res 3 end
  if LT GET int name_res 2 0
    <call writeln_str io CAST [256 x char] "MISSING NAME" end CAST cptr 0 0 0>
  else
  let name_chars = [128 x char] GET [128 x char] name_res 0

  # Consume `=`.
  let eq_res = <IO bool int int> call consume io CAST [256 x char] "=" GET int name_res 3 GET int name_res 4 end
  if call not GET bool eq_res 1 end
    <call writeln_str io CAST [256 x char] "EXPECTED `=`" end CAST cptr 0 0 0>
  else

  # Get the type, which is just a callable with a single named type argument
  # and named return type.
  let type_res = <IO [256 x char] [256 x char] [256 x char] int int>
    call get_callable_type_named_arg_named_ret
      GET IO eq_res 0
      GET int eq_res 2
      GET int eq_res 3
      end
  if call streq GET [256 x char] type_res 1 CAST [256 x char] "" end
    <call writeln_str io CAST [256 x char] "Couldn't parse callable type" end CAST cptr 0 0 0>
  else

  # Lower IO types to i32.
  let first_param_type = [256 x char] GET [256 x char] type_res 1
  if call strne CAST [256 x char] "IO" first_param_type end
    <call writeln_2str io CAST [256 x char] "Unknown type " first_param_type end CAST cptr 0 0 0>
  else

  let return_type = [256 x char] GET [256 x char] type_res 3
  if call strne CAST [256 x char] "IO" return_type end
    <call writeln_2str io CAST [256 x char] "Unknown type " return_type end CAST cptr 0 0 0>
  else

  # Create the function.
  keep param_types = <cptr> <impurecall LLVMInt32Type end>
  keep func_type = cptr impurecall LLVMFunctionType
    impurecall LLVMInt32Type end  # Return type
    CAST cptr param_types
    1  # Param count
    0  # LLVMBool isVarArg
    end
  keep func = cptr impurecall LLVMAddFunction mod CAST cptr name_chars func_type end
  keep entry = cptr impurecall LLVMAppendBasicBlock func CAST cptr "entry" end
  keep builder = cptr impurecall LLVMCreateBuilder end
  keep positioned_builder_at_end = none impurecall LLVMPositionBuilderAtEnd builder entry end

  # Set argument names.
  keep set_arg_name = none impurecall LLVMSetValueName
    impurecall LLVMGetParam func 0 end
    CAST cptr GET [256 x char] type_res 2
    end

  # Get the next token denoting the expression.
  let res = <IO cptr int int> call compile_expr io func builder mod GET int type_res 4 GET int type_res 5 end
  if call not CAST bool GET cptr res 1 end
    <GET IO res 0 CAST cptr 0 0 0>
  else

  keep ret = cptr impurecall LLVMBuildRet builder GET cptr res 1 end

  <GET IO res 0 mod GET int res 2 GET int res 3>

decl printf = \cptr cptr -> int

def main = \IO io_ -> IO
  let mod = cptr impurecall LLVMModuleCreateWithName CAST cptr "my_module" end

  let compile_def_res = <IO cptr int int> call compile_def io_ mod 1 1 end
  let compile_def_IO = IO GET IO compile_def_res 0
  let compile_def_mod = cptr GET cptr compile_def_res 1
  if call not CAST bool GET cptr compile_def_res 1 end
    compile_def_IO
  else

  let verify_failed = int impurecall LLVMVerifyModule compile_def_mod 0 CAST cptr 0 end
  let verify_failed_io = IO call writeln_str_int
    compile_def_IO
    CAST [256 x char] "verify module failed: "
    verify_failed
    end

  keep mod_dump = none impurecall LLVMDumpModule compile_def_mod end

  keep _2 = none impurecall LLVMInitializeX86TargetInfo end
  keep _4 = none impurecall LLVMInitializeX86Target end
  keep _5 = none impurecall LLVMInitializeX86TargetMC end
  keep _6 = none impurecall LLVMInitializeX86AsmParser end
  keep _7 = none impurecall LLVMInitializeX86AsmPrinter end

  keep triple = cptr call LLVMGetDefaultTargetTriple end
  keep target = <cptr> <CAST cptr 0>
  keep _3 = none impurecall LLVMGetTargetFromTriple triple target CAST cptr 0 end
  keep cpu = cptr call LLVMGetHostCPUName end
  keep features = cptr call LLVMGetHostCPUFeatures end

  keep triple_printf_res = int impurecall printf CAST cptr "triple: %s\n" triple end

  keep io__4 = IO call write verify_failed_io "target: " end
  keep io__5 = IO call writeln_cptr io__4 GET cptr target 0 end
  keep io__8 = int call printf CAST cptr "cpu: %s\n" cpu end
  keep printf_num_chars = int call printf CAST cptr "features: %s\n" features end

  keep target_machine = cptr impurecall LLVMCreateTargetMachine
    GET cptr target 0
    triple
    cpu
    features
    0
    2
    0
    end

  let io___11 = IO call write io__5 "target_machine: " end
  let io___12 = IO call write io___11 target_machine end
  let io___13 = IO call write io___12 "\n" end

  keep failed_to_write =
    int call LLVMTargetMachineEmitToFile target_machine mod CAST cptr "add.obj" 1 CAST cptr 0 end
  keep failed_to_write_io =
    IO call writeln_str_int io___13 CAST [256 x char] "failed to write add.obj: " failed_to_write end

  let err_buff = [1024 x char] zero
  let err_buff_ptr = <cptr> <CAST cptr err_buff>

  keep failed_to_write_obj = int impurecall LLVMTargetMachineEmitToFile
    target_machine
    compile_def_mod
    CAST cptr "obj.obj"
    1
    CAST cptr err_buff_ptr
    end
  call writeln_str_int failed_to_write_io CAST [256 x char] "failed to write obj.obj: " failed_to_write_obj end
